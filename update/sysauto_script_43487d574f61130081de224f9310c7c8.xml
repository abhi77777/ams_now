<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <condition/>
        <conditional>false</conditional>
        <name>UpdateAMSServiceRequests</name>
        <run_as display_value="System Administrator">6816f79cc0a8016401c5a33be04be441</run_as>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period/>
        <run_start>2018-04-23 23:05:01</run_start>
        <run_time>1970-01-01 08:00:00</run_time>
        <run_type>on_demand</run_type>
        <script><![CDATA[// this script gets updates for ams req_item cases by a list of IDs.
function getLastCommentTimeByUser(req_item_id, user_name) {
    var timestamp;
    var activity = new GlideRecord('sys_journal_field');
    activity.addQuery('element_id','=', String(req_item_id));
    activity.addQuery('element','=', "comments");
    activity.addQuery('sys_created_by','=', user_name);
    activity.orderByDesc('sys_created_on');
    activity.setLimit(1);
    activity.query();
    if (activity.next()) {
        timestamp = activity.sys_created_on;
    } else {
        timestamp = new GlideDateTime();
        timestamp.setValue(0);
    }
    return String(timestamp).replace(" ", "T");
}
//take this function to a script include
function setRequestedItemState(req_item, service_request_case, service_request, ams_account) {
    //var req_item = service_request.req_item.getRefRecord();
    switch(service_request_case.status) {
        case 'unassigned':
            req_item.state = -5;
            break;
        case 'work-in-progress':
            req_item.state = 2;
            break;
        case 'pending-customer-action':
            req_item.state = 1;
            break;
        case 'customer-action-completed':
            req_item.state = -5;
            break;
        case 'opened':
            req_item.state = 1;
            break;
        case 'resolved':
            req_item.state = 3;
            break;
        case 'reopened':
            req_item.state = 1;
            break;
    }
    service_request.status = service_request_case.status;
    service_request.update();
    req_item.update();
    return req_item;
}

function getActiveCasesForAccount(ams_account) {
    var caseIdList = [];
    var service_request = new GlideRecord('x_195647_ams_ams_service_requests');
    //resolved is the last ams status, bt its set to closed together with the req_item to stop pulling for updates.
    //service_request.addQuery('status','!=', 'closed');
    service_request.addQuery('ams_account','=', String(ams_account.sys_id));
    service_request.query();
    while (service_request.next()) {
        if (service_request.case_id != '') {
            caseIdList.push(String(service_request.case_id));
        }
    }

    //gs.info("caseIdList "+caseIdList);

    var params = {
        includeCommunications: true,
        includeResolvedCases: true,
    };
    params.caseIdList = caseIdList;

    if (caseIdList.length > 0) {
        var AMSApi = new AMSIncidentAPI({
            accessKeyId: String(ams_account.api_key),
            secretAccessKey: String(ams_account.secret_key)
        });
        return AMSApi.listCases(params);
    }
    return [];
}

function updateCommunications(service_request, ams_account) {
    // get last remote update sync.
    last_comment_time = getLastCommentTimeByUser(service_request.req_item, 'admin');

    var params = {
        afterTime: last_comment_time,
        caseId: String(service_request.case_id)
    };

    //gs.info("Get comments for " + service_request.case_id + " req_item " + service_request.req_item.number + " since " + last_comment_time);
    var AMSApi = new AMSIncidentAPI({
        accessKeyId: String(ams_account.api_key),
        secretAccessKey: String(ams_account.secret_key)
    });
    var comms = AMSApi.getCaseCommunications(params);
    //gs.info("GET Case comms from "+last_comment_time+' for '+service_request.case_id+' cases '+JSON.stringify(comms));
    //use this regexp to check the source of the comments the api provides.
    var snow_user = new RegExp(ams_account.iam_user_name);
    var req_item = service_request.req_item.getRefRecord();
    if (req_item.isNewRecord()) {return;}
    // update with a comment for each comment returned thats not created by user.
    for (var c = 0; c < comms.length; c++) {
        var comm = comms[c];
        if (comm.submittedBy.match(snow_user)) { return; }
        if (comm.attachmentSet.length > 0) {
            for (var a = 0; a < comm.attachmentSet.length; a++) {
                params = {
                    attachmentId: String(comm.attachmentSet[a].attachmentId)
                };
                attachment = AMSApi.describeAttachment(params).attachment;
                var sa = new GlideSysAttachment();
                sa.writeBase64( req_item, String(attachment.fileName), 'text/plain', String(attachment.data));
            }
        }
        req_item.autoSysFields(false);
        req_item.comments = comm.body;
        req_item.sys_updated_on = comm.timeCreated.substring(0,(comm.timeCreated.length-5)).replace("T", " ");
        req_item.sys_updated_by = ams_account.assignment_user.user_name;
        req_item.update();
        return req_item;
    }
}

gs.include('AMSIncidentAPI');
(function AMSIncidentUpdater() {
    var ams_account = new GlideRecord('x_195647_ams_ams_accounts');
    ams_account.addQuery();
    ams_account.query();
    while (ams_account.next()) {
        //if (ams_account.active) {
            var ams_cases = getActiveCasesForAccount(ams_account);
            if (!ams_cases) {continue;}
            for (var i = 0; i < ams_cases.length; i++) {
                var ams_case = ams_cases[i];
                //gs.info("Updating case id: "+ams_case.caseId);
                var service_request = new GlideRecord('x_195647_ams_ams_service_requests');
                service_request.addQuery('case_id','=', ams_case.caseId);
                service_request.query();
                while (service_request.next()) {
                    if (!service_request.req_item) {continue;}
                    var req_item = service_request.req_item.getRefRecord();
                    //if (req_item.state > 2) {continue;}
                    // if the req item is not created from an AMS catalog item, do not sync
                    if (String(req_item.cat_item.category.sys_name) == 'AMS Service Request') {
                        gs.info("Updating item: "+req_item.number +" case id "+ams_case.caseId);
                        setRequestedItemState(req_item, ams_case, service_request, ams_account);
                        updateCommunications(service_request, ams_account);
                    }
                }
            }

        //}
    }
})();]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-04-23 23:05:22</sys_created_on>
        <sys_id>43487d574f61130081de224f9310c7c8</sys_id>
        <sys_mod_count>31</sys_mod_count>
        <sys_name>UpdateAMSServiceRequests</sys_name>
        <sys_package display_value="AMS" source="x_195647_ams">8bd5ffa8db6c13004becfabdbf96194f</sys_package>
        <sys_policy/>
        <sys_scope display_value="AMS">8bd5ffa8db6c13004becfabdbf96194f</sys_scope>
        <sys_update_name>sysauto_script_43487d574f61130081de224f9310c7c8</sys_update_name>
        <sys_updated_by>abel.tuter</sys_updated_by>
        <sys_updated_on>2018-04-24 05:51:40</sys_updated_on>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
