<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_195647_ams.AMSChangeTypesIngestion</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>AMSChangeTypesIngestion</name>
        <script><![CDATA[gs.include('AMSChangeManagementAPI');
var AMSChangeTypesIngestion = Class.create();
AMSChangeTypesIngestion.prototype = {
    initialize: function(ams_account) {
      this.ams_account = ams_account;
      var creds = {
        accessKeyId: String(ams_account.api_key),
        secretAccessKey: String(ams_account.secret_key)
      };
      this.amscm = new AMSChangeManagementAPI(creds);
      //this.catalog_item_table = 'x_195647_ams_ams_change_type_catalog';
      //this.catalog_item_table = 'x_195647_ams_ams_change_type_producer';
      this.catalog_item_table = 'sc_cat_item_producer';
      //this.category_table = 'sc_category';
      this.category_table = 'x_195647_ams_ams_change_type_categories';
      //this.variable_table = 'item_option_new';
      this.variable_table = 'x_195647_ams_ams_change_type_variables';
      this.variable_set_table = 'item_option_new_set';
      this.variable_set_item_table = 'io_set_item';
      //this.producer_table = 'x_195647_ams_ams_change_requests';
      this.producer_table = 'change_request';

      var sc_category = new GlideRecord('sc_category');
      sc_category.addQuery("title", "=", 'AMS Change Types');
      sc_category.query();
      if (sc_category.next()){
        this.catalog_category = sc_category;
        this.catalog = sc_category.sc_catalog;
      }
    },

    insertItemVariables: function (schema, item, order_offset, type) {
      var order = order_offset;
      var properties = schema.properties;
      var keys = Object.keys(properties);
      for (var p = 0; p < keys.length; p++) {
        if (properties[keys[p]].type == 'object') {
          var set = new GlideRecord(this.variable_set_table);
          set.initialize();
          set.description = properties[keys[p]]['description'];
          set.name = keys[p];
          set.insert();

          // you bloddy pig set.cat_item = item.sys_id;
          var set_item = new GlideRecord(this.variable_set_item_table);
          set_item.initialize();
          set_item.sc_cat_item = item.sys_id;
          set_item.variable_set = set.sys_id;
          set_item.order = order + 1;
          set_item.display_name = keys[p];
          set_item.insert();
          order+=1;
          this.insertItemVariables(properties[keys[p]], set, order, 'set');
          continue;
        }

        var variable = new GlideRecord(this.variable_table);
        variable.initialize();
        variable.order = order;
        if (type == 'item') {
          variable.cat_item = item.sys_id;
        } 
        else if (type == 'set') {
          variable.variable_set = item.sys_id;
        }
        variable.name = keys[p];
        variable.question_text = keys[p];
        variable.tooltip = properties[keys[p]]['description'];
        variable.help_text = properties[keys[p]]['description'];
        variable.show_help = true;
        variable.insert();
        //gs.info("Insert variable "+variable.name +" id "+ variable.sys_id);
        
        if (properties[keys[p]].type == 'string') {
          if (properties[keys[p]].hasOwnProperty('enum')) {
            //text with choices
            variable.type = 3;
            variable.update();
            var opts = properties[keys[p]]['enum'];
            for (var o = 0; o < opts.length; o++) {
              choice = new GlideRecord('question_choice');
              choice.initialize();
              choice.question = variable.sys_id;
              choice.text = opts[o];
              choice.display_name = opts[o];
              choice.value = opts[o];
              choice.insert();
            }
          }
        }
        /*if (properties[keys[p]].type == 'array') {
          variable.initialize();
          variable.order = order;
          variable.cat_item = item.sys_id;
          variable.name = keys[p];
          variable.question_text = keys[p];
          variable.tooltip = properties[keys[p]]['description'];
          variable.insert();
        }

        if (properties[keys[p]].hasOwnProperty('default')) {
          variable.default_value = properties[keys[p]]['default'];
        }*/

        if (schema.required.indexOf(keys[p]) > 0) {
          variable.mandatory = true;
        }
        variable.update();

        order+=1;
        //gs.info("Insert variable"+variable.sys_id+" name "+variable.name);
      }
      return keys;
    },

    findOrCreateCategoryId: function(category_name, subcategory_name) {
      // It finds or create the CT Category,Subcategory
      var category = new GlideRecord(this.category_table);
      category.addQuery("title", "=", category_name);
      category.query();
      if (!category.next()){
        category.initialize();
        category.title = category_name;
        category.parent = this.catalog_category.sys_id;
        category.insert();
      }
      var subcategory = new GlideRecord(this.category_table);
      subcategory.addQuery("title", "=", subcategory_name);
      subcategory.addQuery("parent", "=", category.sys_id);
      subcategory.query();
      if (!subcategory.next()){
        subcategory.initialize();
        subcategory.title = subcategory_name;
        subcategory.parent = category.sys_id;
        subcategory.insert();
      }
      return subcategory.sys_id;
    },

    insertStandardVariables: function(item, change_type_id, change_type_version) {
      var variable = new GlideRecord(this.variable_table);
      variable.initialize();
      variable.cat_item = item.sys_id;
      variable.name = 'Environment';
      variable.question_text = 'Environment';
      variable.tooltip = 'AMS Account';
      variable.reference = 'x_195647_ams_ams_accounts';
      variable.type = 8;
      variable.order = 0;
      variable.mandatory = true;
      variable.insert();

      variable = new GlideRecord(this.variable_table);
      variable.initialize();
      variable.cat_item = item.sys_id;
      variable.name = 'ChangeTypeId';
      variable.question_text = 'ChangeTypeId';
      variable.tooltip = 'ChangeTypeId';
      variable.default_value = change_type_id;
      variable.order = 1;
      variable.mandatory = true;
      variable.insert();

      variable = new GlideRecord(this.variable_table);
      variable.initialize();
      variable.cat_item = item.sys_id;
      variable.name = 'ChangeTypeVersion';
      variable.question_text = 'ChangeTypeVersion';
      variable.tooltip = 'ChangeTypeVersion';
      variable.default_value = change_type_version;
      variable.order = 2;
      variable.mandatory = true;
      variable.insert();
    },

    ingestChangeType: function(change_type) {
      // creates or replaces a record producer from an AMS CT.
      var item_name = change_type.Operation +' '+ change_type.Item;
      var item = new GlideRecord(this.catalog_item_table);
      item.addQuery("name", "=", item_name);
      item.query();
      while (item.next()) {
        item.deleteRecord();
        //gs.info("Deleted item "+item.name);
      }
      item.initialize();
      item.name = item_name;
      item.table_name = this.producer_table;
      item.sc_catalogs = this.catalog;
      item.category = this.findOrCreateCategoryId(change_type.Category,change_type.Subcategory);
      try {
        var change_type_schema = this.amscm.getChangeTypeVersion({ChangeTypeId: String(change_type.ChangeTypeId)});
        if (change_type_schema) {
          var execution_input_schema = JSON.parse(change_type_schema.ExecutionInputSchema);
          item.short_description = execution_input_schema.description;
          item.insert();
          this.insertStandardVariables(item, change_type.ChangeTypeId, change_type_schema.Version);
          var schema_parameters = this.insertItemVariables(execution_input_schema, item, 10, 'item');
          //var schema_parameters = [];
          vars = '["' + schema_parameters.join('","') + '"]';
          item.script =  'var variables = '+ vars+';gs.include("x_195647_ams.AMSRfcGenerator");generator = new x_195647_ams.AMSRfcGenerator();current.implementation_plan = generator.generate_rfc_object(producer, variables);var ams_account = new GlideRecord("x_195647_ams_ams_accounts");ams_account.addQuery("sys_id", "=", producer.Environment);ams_account.query();if (ams_account.next()) { current.short_description = "[" + ams_account.environment_name + "] - " + producer.name;}';
          item.update();
          gs.info("Insert CT " + change_type.ChangeTypeId + ", Item Name: " + item.name + ", Category "+ item.category.sys_name +", Item Id "+item.sys_id);
        } else {
          gs.info("Ignoring private CT Id: " + change_type.ChangeTypeId);
        }
      } 
      catch(err) {
        gs.info("Error processing ct "+change_type.ChangeTypeId+ " message "+err.message);
      }
    },

    ingestChangeTypes: function () {
      // creates catalogItems in this.catalog from an array of AMS change types
      // the array is the one produced by AMSChangeManagementAPI.getChangeTypeIds
      var change_types = this.amscm.getChangeTypeIds();
      //gs.info("CT "+JSON.stringify(change_types));
      /*var change_types = [{
        Category: 'Deployment',
        Subcategory: 'Advanced stack components',
        Item: 'Application Load Balancer',
        Operation: 'Create',
        ChangeTypeId: 'ct-111r1yayblnw4'
      }];*/
      for (var i = 0; i < change_types.length; i++) {
        var item = this.ingestChangeType(change_types[i]);
      }
    },

    type: 'AMSChangeTypesIngestion'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-04-11 21:56:25</sys_created_on>
        <sys_id>0965371bdb1d13004becfabdbf961988</sys_id>
        <sys_mod_count>62</sys_mod_count>
        <sys_name>AMSChangeTypesIngestion</sys_name>
        <sys_package display_value="AMS" source="x_195647_ams">8bd5ffa8db6c13004becfabdbf96194f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="AMS">8bd5ffa8db6c13004becfabdbf96194f</sys_scope>
        <sys_update_name>sys_script_include_0965371bdb1d13004becfabdbf961988</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-04-25 08:33:55</sys_updated_on>
    </sys_script_include>
</record_update>
