<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>incident</collection>
        <condition>current.assignment_group != ''</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>PushAMSIncident</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[gs.include('AMSIncidentAPI');

function mapSeverity(impact) {
    var severityCode;
    switch(impact) {
        case 2:
            severityCode = 'urgent';
            break;
        case 3:
            severityCode = 'critical';
            break;
        default:
            severityCode = 'normal';
    }
    return severityCode;
}

function createAMSCase(incident, ams_account) {
    var creds = {
        accessKeyId: String(ams_account.api_key),
        secretAccessKey: String(ams_account.secret_key)
    };

    var params = {
      communicationBody: 'AMSTestNoOpsActionRequired - ' + incident.description,
      subject: 'AMSTestNoOpsActionRequired - ' + incident.short_description,
      categoryCode: 'other',
      serviceCode: 'sentinel-report-incident'
    };
    
    params.severityCode = mapSeverity(current.impact);

    AMSApi = new AMSIncidentAPI(creds);
    var ams_case_id = AMSApi.createCase(params);
    //gs.info("Created AMS Case ID: " + ams_case_id);
    
    // insert in AMS Incidents table
    var new_ams_incident = new GlideRecord('x_195647_ams_ams_incidents');
    new_ams_incident.initialize();
    new_ams_incident.case_id = ams_case_id;
    new_ams_incident.ams_account = ams_account.sys_id;
    new_ams_incident.incident = current.sys_id;
    new_ams_incident.insert();
    return new_ams_incident;
}

function resolveAMSCase(caseId, ams_account) {
    var creds = {
        accessKeyId: String(ams_account.api_key),
        secretAccessKey: String(ams_account.secret_key)
    };

    AMSApi = new AMSIncidentAPI(creds);
    var result = AMSApi.resolveCase(caseId);

    // update AMS Incidents table
    var ams_incident = new GlideRecord('x_195647_ams_ams_incidents');
    ams_incident.addQuery('case_id','=', caseId);
    ams_incident.query();
    if (ams_incident.next()) {
        ams_incident.status = 'resolved';
        ams_incident.update();
    }
    return result;
}


(function executeRule(current, previous) {
    
    (function push_ams_incident() {
        try {
            gs.info("PushAMSIncident"+current.name);
            var ams_account = new GlideRecord('x_195647_ams_ams_accounts');
            ams_account.addQuery('assignment_group','=', current.assignment_group.sys_id);
            ams_account.query();
            if (ams_account.next() && ams_account.active) {
                var ams_incident = new GlideRecord('x_195647_ams_ams_incidents');
                ams_incident.addQuery('incident','=', current.sys_id);
                ams_incident.query();
                if (ams_incident.next()) {
                    if (current.incident_state > 5) {
                        var result = resolveAMSCase(ams_incident.case_id, ams_account);
                    }
                } else {
                    var new_ams_incident = createAMSCase(current, ams_account);
                }
            } else {
                gs.info("No active AMS account exists for this resolver group.");
            }
        }
        catch (ex) {
            gs.error(ex);
        }
    })();
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-02-25 14:02:01</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>7fb7d674db2413004becfabdbf96195b</sys_id>
        <sys_mod_count>100</sys_mod_count>
        <sys_name>PushAMSIncident</sys_name>
        <sys_overrides/>
        <sys_package display_value="AMS" source="x_195647_ams">8bd5ffa8db6c13004becfabdbf96194f</sys_package>
        <sys_policy/>
        <sys_scope display_value="AMS">8bd5ffa8db6c13004becfabdbf96194f</sys_scope>
        <sys_update_name>sys_script_7fb7d674db2413004becfabdbf96195b</sys_update_name>
        <sys_updated_by>abel.tuter</sys_updated_by>
        <sys_updated_on>2018-03-14 03:52:32</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=7fb7d674db2413004becfabdbf96195b"/>
</record_update>
