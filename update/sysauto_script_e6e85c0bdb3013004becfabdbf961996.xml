<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <condition/>
        <conditional>false</conditional>
        <name>AMSIncidentGetNew</name>
        <run_as display_value="Abel Tuter">62826bf03710200044e0bfc8bcbe5df1</run_as>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period>1970-01-01 00:00:10</run_period>
        <run_start>2018-03-16 14:42:43</run_start>
        <run_time>1970-01-01 00:00:00</run_time>
        <run_type>periodically</run_type>
        <script><![CDATA[//take this function to a script include
function setIncidentState(incident, incident_case, ams_incident, ams_account) {
    //var incident = ams_incident.incident.getRefRecord();
    switch(incident_case.status) {
        case 'unassigned':
            incident.state = 1;
            break;
        case 'work-in-progress':
            incident.state = 2;
            incident.assigned_to = ams_account.assignment_user;
            break;
        case 'pending-customer-action':
            incident.state = 1;
            incident.assigned_to = 'NULL';
            break;
        case 'customer-action-completed':
            incident.state = 1;
            incident.assigned_to = ams_account.assignment_user;
            break;
        case 'opened':
            incident.state = 2;
            incident.assigned_to = ams_account.assignment_user;
            break;
        case 'resolved':
            incident.state = 6;
            //hardocded as the is no resolution code advertised by AMS
            incident.close_code = 'Solved'; 
            incident.close_notes = 'Resolved by AMS';
            incident.resolved_by = ams_account.assignment_user;
            incident.assigned_to = ams_account.assignment_user;
            break;
        case 'reopened':
            incident.state = 1;
            break;
    }
    ams_incident.status = incident_case.status;
    ams_incident.update();
    incident.update();
    return incident;
}

function createIncidentRecord(ams_case, ams_account) {
    // create the relation case first to ugly-prevent it ever getting dupplicated.
    var new_ams_incident = new GlideRecord('x_195647_ams_ams_incidents');
    new_ams_incident.initialize();
    new_ams_incident.case_id = ams_case.caseId;
    new_ams_incident.ams_account = ams_account.sys_id;
    new_ams_incident.status = ams_case.status;
    
    var new_incident = new GlideRecord('incident');
    new_incident.initialize(); 
    new_incident.short_description = ams_case.subject;
    new_incident.description = ams_case.recentCommunications.communications[0].body;
    new_incident.caller_id = ams_account.assignment_user;
    new_incident.insert();
    
    new_ams_incident.incident = new_incident.sys_id;
    new_ams_incident.update();
    return new_ams_incident;
}

gs.include('AMSIncidentAPI');
(function AMSNewIncidentPoller() {
    var ams_account = new GlideRecord('x_195647_ams_ams_accounts');
    ams_account.addQuery();
    ams_account.query();
    while (ams_account.next()) {
        if (ams_account.active) {
            gs.info("Polling New Incidents from AMS account " + ams_account.environment_name);
        
            var params = {
              includeCommunications: true,
              includeResolvedCases: false
            };

            var creds = {
                accessKeyId: String(ams_account.api_key),
                secretAccessKey: String(ams_account.secret_key)
            };
            AMSApi = new AMSIncidentAPI(creds);
            var ams_cases = AMSApi.listCases(params);
            
            for (var i = 0; i < ams_cases.length; i++) {
                var ams_case = ams_cases[i];
                var ams_incident = new GlideRecord('x_195647_ams_ams_incidents');
                ams_incident.addQuery('case_id','=', ams_cases[i]["caseId"]); //add close filter
                ams_incident.query();
                if (ams_incident.next()) {
                    //gs.info("Incident exists from case exists "+ams_incident.case_id);
                    //case exists, continue
                    continue;
                } else {
                    ams_incident = createIncidentRecord(ams_case,ams_account);
                    var incident = ams_incident.incident.getRefRecord();
                    incident = setIncidentState(incident, ams_case, ams_incident, ams_account);
                    //gs.info("New Incident: "+incident.number+" from case "+ams_incident.case_id);
                }                
            }

        }
    }
})();]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>abel.tuter</sys_created_by>
        <sys_created_on>2018-03-16 15:09:30</sys_created_on>
        <sys_id>e6e85c0bdb3013004becfabdbf961996</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>AMSIncidentGetNew</sys_name>
        <sys_package display_value="AMS" source="x_195647_ams">8bd5ffa8db6c13004becfabdbf96194f</sys_package>
        <sys_policy/>
        <sys_scope display_value="AMS">8bd5ffa8db6c13004becfabdbf96194f</sys_scope>
        <sys_update_name>sysauto_script_e6e85c0bdb3013004becfabdbf961996</sys_update_name>
        <sys_updated_by>abel.tuter</sys_updated_by>
        <sys_updated_on>2018-03-21 02:32:11</sys_updated_on>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
