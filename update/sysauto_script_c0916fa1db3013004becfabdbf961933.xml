<?xml version="1.0" encoding="UTF-8"?><record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <condition/>
        <conditional>false</conditional>
        <name>UpdateAMSIncident</name>
        <run_as display_value="System Administrator">6816f79cc0a8016401c5a33be04be441</run_as>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period>1970-01-01 00:00:10</run_period>
        <run_start>2018-03-12 13:28:28</run_start>
        <run_time>1970-01-01 08:00:00</run_time>
        <run_type>periodically</run_type>
        <script><![CDATA[// this script gets updates for ams incident cases by a list of IDs.
function getLastCommentTimeByUser(incident_id, user_name) {
    var timestamp;
    var activity = new GlideRecord('sys_journal_field');
    activity.addQuery('element_id','=', String(incident_id));
    activity.addQuery('element','=', "comments");
    activity.addQuery('sys_created_by','=', user_name);
    activity.orderByDesc('sys_created_on');
    activity.setLimit(1);
    activity.query();
    if (activity.next()) {
        timestamp = activity.sys_created_on;
    } else {
        timestamp = new GlideDateTime();
        timestamp.setValue(0);
    }
    return String(timestamp).replace(" ", "T");
}
//take this function to a script include
function setIncidentState(incident, incident_case, ams_incident, ams_account) {
    //var incident = ams_incident.incident.getRefRecord();
	if (incident_case.status == ams_incident.status ) {
	  return;
	}
    switch(incident_case.status) {
        case 'unassigned':
            incident.state = 1;
            break;
        case 'work-in-progress':
            incident.state = 2;
            incident.assigned_to = ams_account.assignment_user;
            break;
        case 'pending-customer-action':
            incident.state = 2;
            incident.assigned_to = 'NULL';
            break;
        case 'customer-action-completed':
            incident.state = 2;
            incident.assigned_to = ams_account.assignment_user;
            break;
        case 'opened':
            incident.state = 2;
            incident.assigned_to = ams_account.assignment_user;
            break;
        case 'resolved':
            incident.state = 6;
            //hardocded as the is no resolution code advertised by AMS
            incident.close_code = 'Solved'; 
            incident.close_notes = 'Resolved by AMS';
            incident.resolved_by = ams_account.assignment_user;
            incident.assigned_to = ams_account.assignment_user;
            break;
        case 'reopened':
            incident.state = 1;
            break;
    }
    ams_incident.status = incident_case.status;
    ams_incident.update();
    incident.update();
    return incident;
}

function getActiveCasesForAccount(ams_account) {
    var caseIdList = [];
    var ams_incident = new GlideRecord('x_195647_ams_ams_incidents');
    //resolved is the last ams status, bt its set to closed together with the incident to stop pulling for updates.
    ams_incident.addQuery('status','!=', 'closed');
    ams_incident.addQuery('ams_account','=', ams_account.sys_id);
    // should optimize query
    ams_incident.query();
    while (ams_incident.next()) {
        if (ams_incident.case_id != '') {
            caseIdList.push(String(ams_incident.case_id));
        }
    }
    //gs.info("caseIdList"+caseIdList);

    var params = {
        includeCommunications: true,
        includeResolvedCases: true,
        caseIdList: caseIdList
    };
    
    if (caseIdList.length > 0) {
        var AMSApi = new AMSIncidentAPI({
            accessKeyId: String(ams_account.api_key),
            secretAccessKey: String(ams_account.secret_key)
        });
        return AMSApi.listCases(params);
    } 
    return [];
}

function updateCommunications(ams_incident, ams_account) {
    // get last remote update sync.
    last_comment_time = getLastCommentTimeByUser(ams_incident.incident, 'admin');

    var params = {
        afterTime: last_comment_time,
        caseId: String(ams_incident.case_id)
    };

    //gs.info("Get comments for " + ams_incident.case_id + " incident " + ams_incident.incident.number + " since " + last_comment_time);
    var AMSApi = new AMSIncidentAPI({
        accessKeyId: String(ams_account.api_key),
        secretAccessKey: String(ams_account.secret_key)
    });
    var comms = AMSApi.getCaseCommunications(params);
    //gs.info("GET Case comms from "+last_comment_time+' for '+ams_incident.case_id+' cases '+JSON.stringify(comms));
    //use this regexp to check the source of the comments the api provides.
    var snow_user = new RegExp(ams_account.iam_user_name);
    var incident = ams_incident.incident.getRefRecord();
    if (incident.isNewRecord()) {return;}
    // update with a comment for each comment returned thats not created by user.
    for (var c = 0; c < comms.length; c++) {
        var comm = comms[c];
        if (comm.submittedBy.match(snow_user)) { return; }
        if (comm.attachmentSet.length > 0) {
            for (var a = 0; a < comm.attachmentSet.length; a++) {
                params = {
                    attachmentId: String(comm.attachmentSet[a].attachmentId)
                };
                attachment = AMSApi.describeAttachment(params).attachment;
                var sa = new GlideSysAttachment();
                sa.writeBase64( incident, String(attachment.fileName), 'text/plain', String(attachment.data));
            }
        }
        incident.autoSysFields(false);
        incident.comments = comm.body;
        incident.sys_updated_on = comm.timeCreated.substring(0,(comm.timeCreated.length-5)).replace("T", " ");
        incident.sys_updated_by = ams_account.assignment_user.user_name;
        incident.update();
        return incident;
    }
}

function createNewIncidentRecord(ams_incident, ams_case, ams_account) {
    // create the relation case first to ugly-prevent it ever getting dupplicated.
    var new_incident = new GlideRecord('incident');
    new_incident.initialize(); 
    new_incident.short_description = ams_case.subject;
    new_incident.description = ams_case.recentCommunications.communications[0].body;
    new_incident.caller_id = ams_account.assignment_user;
    new_incident.insert();
    
    ams_incident.incident = new_incident.sys_id;
    ams_incident.update();
    
    new_incident.update();
    return new_incident;
}

gs.include('AMSIncidentAPI');
(function AMSIncidentUpdater() {
    var ams_account = new GlideRecord('x_195647_ams_ams_accounts');
    ams_account.addQuery();
    ams_account.query();
    while (ams_account.next()) {
        if (ams_account.active) {
            gs.info("UPDATE from account: "+ams_account.environment_name);
            var ams_cases = getActiveCasesForAccount(ams_account);
            if (!ams_cases) {continue;}
            for (var i = 0; i < ams_cases.length; i++) {
                var ams_case = ams_cases[i];
                var ams_incident = new GlideRecord('x_195647_ams_ams_incidents');
                ams_incident.addQuery('case_id','=', ams_case.caseId);
                ams_incident.query();
                while (ams_incident.next()) {
                    var incident = ams_incident.incident.getRefRecord();
                    if (incident.state > 6) {continue;}
                    //if the incident is new, create it: prevents race condition
                    if (incident.isNewRecord()) {
                        incident = createNewIncidentRecord(ams_incident, ams_case, ams_account);
                    }
                    // if the assignment group of the incident is not AMS do not synchronize.
                    if (incident.assignment_group == ams_account.assignment_group) {
                        setIncidentState(incident, ams_case, ams_incident, ams_account);
                        updateCommunications(ams_incident, ams_account);
                    }
                }
            }

        }
    }
})();]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-03-12 13:28:51</sys_created_on>
        <sys_id>c0916fa1db3013004becfabdbf961933</sys_id>
        <sys_mod_count>263</sys_mod_count>
        <sys_name>UpdateAMSIncident</sys_name>
        <sys_package display_value="AMS" source="x_195647_ams">8bd5ffa8db6c13004becfabdbf96194f</sys_package>
        <sys_policy/>
        <sys_scope display_value="AMS">8bd5ffa8db6c13004becfabdbf96194f</sys_scope>
        <sys_update_name>sysauto_script_c0916fa1db3013004becfabdbf961933</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-07-19 13:36:27</sys_updated_on>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
