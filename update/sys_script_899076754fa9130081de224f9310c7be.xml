<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>change_task</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>PushRfC</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[gs.include('AMSChangeManagementAPI');
function sleep(ms) {
  var unixtime_ms = new Date().getTime();
  while(new Date().getTime() < unixtime_ms + ms) {}
}

(function executeRule(current, previous) {
  (function createRfc() {
    if (current.short_description != 'Implement') {return;}
    var change_request = current.parent.getRefRecord();
    var CatalogParams = JSON.parse(change_request.implementation_plan);
    //gs.info("PARSED: "+JSON.stringify(CatalogParams));
    if (!CatalogParams) {return;}
    
    var ams_account = new GlideRecord('x_195647_ams_ams_accounts');
    ams_account.addQuery('sys_id','=', String(CatalogParams.EnvironmentId));
    ams_account.query();
    if (!ams_account.hasNext()) {return;}
    ams_account.next();
    var creds = {
      accessKeyId: ams_account.api_key,
      secretAccessKey: ams_account.secret_key
    };

    // Build RFC structure into params object.
    var params = CatalogParams.RfcParameters;
    if (change_request.start_date) {
      params.RequestedStartTime = String(change_request.start_date).replace(" ", "T");
    } else {
      params.RequestedStartTime = '';
    }
    if (change_request.end_date) {
      params.RequestedEndTime = String(change_request.end_date).replace(" ", "T");
    }
    else {
      params.RequestedEndTime = '';
    }
    if (change_request.short_description) {
      params.Title = String(change_request.short_description);
    } else {
      params.Title = String(change_request.number);
    }
    if (change_request.description) {
      params.Description = String(change_request.description);
    } else {
      params.Description = String(change_request.number);
    }
    if (change_request.backout_plan) {
      params.RollbackPlan = String(change_request.backout_plan);
    } else {
      params.RollbackPlan = 'n/a';
    }
    if (change_request.risk_impact_analysis) {
      params.WorstCaseScenario = String(change_request.risk_impact_analysis);
    } else {
      params.WorstCaseScenario = 'n/a';
    }
    if (change_request.justification) {
      params.ExpectedOutcome = String(change_request.justification);
    } else {
      params.ExpectedOutcome = 'n/a';
    }
    params.ImplementationPlan = "AMS RFC Execution";

    /*var params = {
      "ChangeTypeId": String(CatalogParams.RfcParameters.ChangeTypeId),
      "ChangeTypeVersion": String(CatalogParams.RfcParameters.ChangeTypeVersion),
      "Description": "AMSTestNoOpsActionRequired",
      "ExecutionParameters": String(CatalogParams.RfcParameters.ExecutionParameters),
      "ExpectedOutcome": "n/a",
      "ImplementationPlan": "n/a",
      "RequestedEndTime": "",
      "RequestedStartTime": "",
      "RollbackPlan": "n/a",
      "Title": "AMSTestNoOpsActionRequired",
      "WorstCaseScenario": "n/a"
    };*/

    CmApi = new AMSChangeManagementAPI(creds);
    RfcId = CmApi.createRfc(params);
    if (!RfcId) {gs.info("Failed to create RFC.") ;return;}
    current.comments = "Created RFC: " + RfcId;
    current.update();
    gs.info("Created RFC ID:"+RfcId);
    CmApi.submitRfc({"RfcId":RfcId});

    var status = '';
    while ( status == '' ) {
      sleep(10000);
      var Rfc = CmApi.getRfc({"RfcId":RfcId});
      if (Rfc.Status.Id == 'Canceled') {
        status = Rfc.Status.Id;
        current.state = 4;
        current.comments = "Cancel Reason: " + Rfc.StatusReason;
      }
      if (Rfc.Status.Id == 'Failure') {
        status = Rfc.Status.Id;
        current.state = 4;
        current.comments = "Failure Reason: " + Rfc.StatusReason;
      }
      if (Rfc.Status.Id == 'Rejected') {
        status = Rfc.Status.Id;
        current.state = 4;
        current.comments = "Rejected Reason: " + Rfc.StatusReason;
      }
      if (Rfc.Status.Id == 'Success') {
        status = Rfc.Status.Id;
        current.state = 3;
        current.comments = "Execution Output: " + Rfc.ExecutionOutput;
      }
    }
    current.update();
    gs.info("DONE "+RfcId);

  })();
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-04-19 11:20:42</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>899076754fa9130081de224f9310c7be</sys_id>
        <sys_mod_count>44</sys_mod_count>
        <sys_name>PushRfC</sys_name>
        <sys_overrides/>
        <sys_package display_value="AMS" source="x_195647_ams">8bd5ffa8db6c13004becfabdbf96194f</sys_package>
        <sys_policy/>
        <sys_scope display_value="AMS">8bd5ffa8db6c13004becfabdbf96194f</sys_scope>
        <sys_update_name>sys_script_899076754fa9130081de224f9310c7be</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-04-25 07:49:18</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=899076754fa9130081de224f9310c7be"/>
</record_update>
