<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>change_task</collection>
        <condition>current.short_description == 'Implement'</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>PushRfC</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[//condition : current.short_description == 'Implement'
gs.include('AMSChangeManagementAPI');

function parseImplementationPlan (value) {
  try {
    var implementation_plan = JSON.parse(value);
    return implementation_plan;
  }
  catch(err) {
    gs.error("Implementation plan: " + err);
    return false;
  }
}

function retryInstructions(rfc) {
  return "\nSet retry in the RFC record below and add a work note in this task to try again."+
          "\nhttps://" + gs.getProperty("instance_name") + ".service-now.com/x_195647_ams_rfc.do" + "?sys_id=" + rfc.sys_id;
}

(function executeRule(current, previous) {
  (function createRfc() {
    gs.info("Push RFC ID: "+current.number);
    var change_request = current.parent.getRefRecord();
    
    var rfc = new GlideRecord('x_195647_ams_rfc');
    rfc.addQuery('change_task', current.sys_id);
    rfc.addQuery('change_request', change_request.sys_id);
    rfc.query();
    if (rfc.hasNext()) {
      rfc.next();
      if (rfc.status == 'error' && rfc.retry) {
        rfc.retry = false;
        rfc.rfc_id = null;
        rfc.status = null;
      } 
    else {
        return;
      }
    } else {
      rfc.initialize();
      rfc.change_request = change_request.sys_id;
      rfc.change_task = current.sys_id;
    }

    var implementation_plan = parseImplementationPlan(change_request.implementation_plan);
    if (!implementation_plan) {
      rfc.status = 'error';
      rfc.rfc_id = current.number;
      rfc.update();
      current.work_notes = "AMS RFC: Failed to create RFC for ["+ current.number + "], "+
                           "invalid change implementation plan, "+
                           "see Implementation plan erros in the system log." +
                           retryInstructions(rfc);
                         
      current.update();
      return;
    }
    
    var ams_account = new GlideRecord('x_195647_ams_ams_accounts');
    ams_account.addQuery('sys_id','=', String(implementation_plan.EnvironmentId));
    ams_account.query();
    if (!ams_account.hasNext()) {return;}
    ams_account.next();
    var creds = {
        accessKeyId: String(ams_account.api_key),
        secretAccessKey: ams_account.secret_key.getDecryptedValue()
    };

    // Map change request information into AMS RFC.
    var params = implementation_plan.RfcParameters;
    if (change_request.start_date) {
      params.RequestedStartTime = String(change_request.start_date).replace(" ", "T");
    }
    if (change_request.end_date) {
      params.RequestedEndTime = String(change_request.end_date).replace(" ", "T");
    }
    if (change_request.short_description) {
      params.Title = String(change_request.short_description);
    } else {
      params.Title = String(change_request.number);
    }
    if (change_request.description) {
      params.Description = String(change_request.description);
    } else {
      params.Description = String("Automated Change Request: " + change_request.number);
    }
    if (change_request.backout_plan) {
      params.RollbackPlan = String(change_request.backout_plan);
    } else {
      params.RollbackPlan = 'n/a';
    }
    if (change_request.risk_impact_analysis) {
      params.WorstCaseScenario = String(change_request.risk_impact_analysis);
    } else {
      params.WorstCaseScenario = 'n/a';
    }
    if (change_request.justification) {
      params.ExpectedOutcome = String(change_request.justification);
    } else {
      params.ExpectedOutcome = 'n/a';
    }
    params.ImplementationPlan = "Automated RFC Execution";

    //Create RFC
    CmApi = new AMSChangeManagementAPI(creds);
    RfcId = CmApi.createRfc(params);
    if (!RfcId) {
      rfc.status = 'error';
      rfc.rfc_id = current.number;
      rfc.update();
      current.work_notes = "AMS RFC: Failed to create RFC for ["+ current.number + "], "+
                         "Check system logs for AMSCM API request error." +
                         retryInstructions(rfc);

      current.update();
      return;
    }
    else {
      rfc.rfc_id = RfcId;
      rfc.status = 'editing';
      rfc.insert();
    }

    current.work_notes = "Created AMS RFC, ID: " + RfcId;
    current.update();
    if (!CmApi.submitRfc({"RfcId":RfcId})) { 
      gs.error("Failed to submit RFC " + RfcId);
      return;
    }
    current.work_notes = "Submitted AMS RFC, ID: " + RfcId;
    current.update();
    // queue RFC update poller.
    gs.eventQueue("x_195647_ams.updateRfc", rfc);

  })();
})(current, previous);
]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-04-19 11:20:42</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>899076754fa9130081de224f9310c7be</sys_id>
        <sys_mod_count>76</sys_mod_count>
        <sys_name>PushRfC</sys_name>
        <sys_overrides/>
        <sys_package display_value="AMS" source="x_195647_ams">8bd5ffa8db6c13004becfabdbf96194f</sys_package>
        <sys_policy/>
        <sys_scope display_value="AMS">8bd5ffa8db6c13004becfabdbf96194f</sys_scope>
        <sys_update_name>sys_script_899076754fa9130081de224f9310c7be</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-02-05 17:30:19</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=899076754fa9130081de224f9310c7be"/>
</record_update>
